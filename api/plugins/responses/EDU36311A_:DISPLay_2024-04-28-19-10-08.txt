Below is an example of a Python class that encapsulates a subset of the SCPI commands for the EDU36311A power supply, focusing on display control. It includes the `:DISPlay:ENABle` command, which toggles the display on and off, and can be used to query the current state of the display.

Please note that this is a basic example and does not include actual communication with the device. You would need to implement the communication using a library like PyVISA, which is typically used for instrument control in Python.

```python
import pyvisa

class EDU36311APowerSupply:
    def __init__(self, resource_name):
        self.rm = pyvisa.ResourceManager()
        self.instr = self.rm.open_resource(resource_name)
    
    def enable_display(self, enable=True):
        """
        Enables or disables the display on the power supply.
        :param enable: A boolean value where True enables the display and False disables it.
        """
        if enable:
            self.instr.write(":DISPlay:ENABle ON")
        else:
            self.instr.write(":DISPlay:ENABle OFF")
    
    def query_display_enabled(self):
        """
        Queries the power supply to determine if the display is enabled or disabled.
        :return: True if the display is enabled, False otherwise.
        """
        response = self.instr.query(":DISPlay:ENABle?")
        return response.strip().upper() == "ON"

    def close(self):
        """
        Closes the connection to the power supply.
        """
        self.instr.close()
        self.rm.close()

# Example usage:
if __name__ == "__main__":
    # Substitute 'USB0::0x2A8D::0x1202::MY1234567::INSTR' with the actual address of your power supply.
    power_supply = EDU36311APowerSupply('USB0::0x2A8D::0x1202::MY1234567::INSTR')
    
    # Enable the display
    power_supply.enable_display(True)
    
    # Query the display status
    is_display_enabled = power_supply.query_display_enabled()
    print("Display Enabled:" if is_display_enabled else "Display Disabled")
    
    # Disable the display
    power_supply.enable_display(False)
    
    # Clean up
    power_supply.close()
```

Remember to replace `'USB0::0x2A8D::0x1202::MY1234567::INSTR'` with the actual USB resource string for your EDU36311A power supply. You can find this string using the NI-VISA or PyVISA `list_resources()` function.

In a real-world scenario, you should also implement error handling and possibly a more sophisticated communication mechanism to ensure robust operation.