
import pyvisa

class EDU36311ADisplayControl:
    def __init__(self, resource_name):
        # Assume we're using PyVISA to communicate with the device
        self.rm = pyvisa.ResourceManager()
        self.instr = self.rm.open_resource(resource_name)
        
    def enable_display(self, enable):
        """
        Enables or disables the display of the EDU36311A device.
        
        :param enable: bool - True to enable display, False to disable
        """
        command = ":DISPlay:ENABle {}".format('ON' if enable else 'OFF')
        self.instr.write(command)
        
    def query_display_enabled(self):
        """
        Queries if the display of the EDU36311A device is enabled or disabled.
        
        :return: bool - True if enabled, False if disabled
        """
        response = self.instr.query(":DISPlay:ENABle?")
        return True if response.strip().upper() == 'ON' else False

    def close(self):
        """
        Closes the connection to the instrument.
        """
        self.instr.close()
        self.rm.close()

# Usage example
if __name__ == "__main__":
    try:
        # Replace 'USB0::0x2A8D::0x1202::MY1234567::0::INSTR' with the actual address of your device
        power_supply_display = EDU36311ADisplayControl('USB0::0x2A8D::0x1202::MY1234567::0::INSTR')
        
        # Turn off the display to increase speed or for security purposes
        power_supply_display.enable_display(False)
        
        # Check if the display is enabled
        if power_supply_display.query_display_enabled():
            print("Display is enabled.")
        else:
            print("Display is disabled.")
            
        # Re-enable the display
        power_supply_display.enable_display(True)
        
    finally:
        # Ensure the device connection is closed regardless of what happens
        power_supply_display.close()
