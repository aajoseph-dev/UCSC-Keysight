Based on the context and instructions provided, here is the code for a Python class that handles a subset of SCPI commands for controlling the display of a power supply device, the EDU36311A.

```python
import visa

class EDUPowerSupplyDisplayControl:
    def __init__(self, resource_name):
        self.resource_manager = visa.ResourceManager()
        self.instrument = self.resource_manager.open_resource(resource_name)
        self.instrument.timeout = 5000  # Set timeout to 5 seconds

    def enable_display(self, enable=True):
        """
        Enables or disables the display of the EDU36311A power supply.
        :param enable: True to enable the display, False to disable it
        """
        if enable:
            self.instrument.write(':DISPlay:ENABle ON')
        else:
            self.instrument.write(':DISPlay:ENABle OFF')

    def query_display_enabled(self):
        """
        Queries whether the display of the EDU36311A power supply is enabled.
        :return: True if the display is enabled, False otherwise
        """
        response = self.instrument.query(':DISPlay:ENABle?')
        return response.strip().upper() in ('ON', '1')

    def close(self):
        """
        Closes the connection to the instrument.
        """
        self.instrument.close()

# Example usage
if __name__ == '__main__':
    try:
        power_supply_display = EDUPowerSupplyDisplayControl('USB0::0x2A8D::0x1301::MY1234567::INSTR')
        power_supply_display.enable_display(False)  # Turn off the display
        display_status = power_supply_display.query_display_enabled()
        print(f'Display Enabled: {display_status}')
        power_supply_display.enable_display(True)  # Turn on the display
    finally:
        power_supply_display.close()
```

Please note the following:
- `visa` is used for VISA (Virtual Instrument Software Architecture) communication. You might need to install the PyVISA package (`pip install pyvisa`) and the necessary backend (such as NI-VISA or PyVISA-py).
- Replace `'USB0::0x2A8D::0x1301::MY1234567::INSTR'` with the actual VISA resource name of your power supply. You can find this using the VISA resource manager or a tool like NI MAX.
- The class includes methods for enabling/disabling the display and querying the current state of the display.
- The class also includes a `close` method to properly close the VISA resource.
- The example usage at the bottom demonstrates how to use the class in a script. It is wrapped in a try-finally block to ensure that the instrument connection is closed even if an error occurs.