Here's a Python class for controlling the EDU36311A power supply's display using SCPI commands. This class includes functions to turn the display on and off and to query the current state of the display:

```python
import visa

class EDU36311APowerSupply:
    def __init__(self, resource_name):
        # Initialize connection to the power supply
        self.rm = visa.ResourceManager()
        self.instrument = self.rm.open_resource(resource_name)
        self.instrument.write_termination = '\n'
        self.instrument.read_termination = '\n'

    def display_enable(self, enable=True):
        # Turn the display on or off
        command = ":DISPlay:ENABle {}".format('ON' if enable else 'OFF')
        self.instrument.write(command)

    def query_display_enable(self):
        # Query the current state of the display
        response = self.instrument.query(":DISPlay:ENABle?")
        return True if response.strip() == '1' else False

    def close(self):
        # Close the connection to the instrument
        self.instrument.close()

# Example usage:
if __name__ == '__main__':
    # Replace 'USB0::0x2A8D::0x1202::MY12345678::INSTR' with your actual resource name
    resource_name = 'USB0::0x2A8D::0x1202::MY12345678::INSTR'
    power_supply = EDU36311APowerSupply(resource_name)
    
    # Turn off the display
    power_supply.display_enable(False)
    
    # Query the state of the display
    is_display_on = power_supply.query_display_enable()
    print("Display is on:" if is_display_on else "Display is off")
    
    # Turn on the display
    power_supply.display_enable(True)
    
    # Close the connection
    power_supply.close()
```

This class uses PyVISA, a Python library that enables you to control measurement devices and test equipment via GPIB, RS232, Ethernet or USB. To use this class, you must have PyVISA and the appropriate backend (like NI-VISA) installed on your system. The `resource_name` passed to the class constructor must be the VISA resource name of your power supply, which you can obtain using the NI-MAX tool or PyVISA's `list_resources()` method.

Please note that the above example assumes you are using a USB connection. If you are using a different interface, you may need to adjust the `resource_name` accordingly. Additionally, this code is a starting point and may require further adjustments to align with your specific test setup and requirements.