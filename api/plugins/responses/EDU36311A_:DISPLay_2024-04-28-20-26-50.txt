Below is an example of a Python class that represents a plugin for controlling the EDU36311A Power Supply display using SCPI commands. The class includes methods for turning the display on and off, as well as querying the current display status.

```python
import visa

class EDU36311APowerSupply:
    def __init__(self, resource_name):
        self.rm = visa.ResourceManager()
        self.instrument = self.rm.open_resource(resource_name)

    def display_enable(self, enable):
        """
        Enables or disables the display.
        
        :param enable: True to enable the display, False to disable it.
        """
        if enable:
            self.instrument.write(':DISPlay:ENABle ON')
        else:
            self.instrument.write(':DISPlay:ENABle OFF')

    def query_display_enabled(self):
        """
        Queries the current display status.
        
        :return: True if the display is enabled, False if disabled.
        """
        response = self.instrument.query(':DISPlay:ENABle?')
        return response.strip().upper() == 'ON'

    def close(self):
        """
        Closes the connection to the instrument.
        """
        self.instrument.close()

# Example usage
if __name__ == '__main__':
    resource_name = 'USB0::0x2A8D::0x1202::MY1234567::INSTR'  # Replace with your actual VISA resource string
    power_supply = EDU36311APowerSupply(resource_name)

    try:
        # Turn off the display for increased speed during measurements
        power_supply.display_enable(False)
        
        # Perform battery testing operations here...

        # Query the display status
        is_display_enabled = power_supply.query_display_enabled()
        print(f"Display enabled: {is_display_enabled}")

    finally:
        # Re-enable the display after testing is complete
        power_supply.display_enable(True)
        power_supply.close()
```

Remember to replace the `resource_name` with the actual VISA resource string that corresponds to your EDU36311A Power Supply connected via USB. This class uses the PyVISA library to communicate with the instrument over the VISA interface. Make sure to have PyVISA and the necessary backend (like NI-VISA or pyvisa-py) installed in your environment.